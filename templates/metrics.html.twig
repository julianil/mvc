{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Metrics analys</h1>
    <p class="author">Skriven 2023-04-05 av Julia Nilsson</p>
    <div class="analys">
        <h2>Introduktion</h2>
        <p>Börja med en rubrik “Introduktion” där du förklarar de sex C:na och hur de kan påverka kodens kvalitet. Exemplifiera, där det passar, med några mätvärden som är kopplad till din egen kod och ge en kort förklaring av mätvärdet relaterat till kodkvalitet.</p>
        <ul>
            <li>Codestyle: Det första C:et handlar kort och gott om hur koden är skriven rent visuellt. Är koden skriven på ett visst sätt 
            underlättar det för dig själv och andra att förstå samt läsa koden. Detta i sin tur gör att koden är lättare att exempelvis redigera eller vidareutveckla utan 
            att den förstörs. Saker man kan tänka på för att säkerställa en god kodstil är exemplvis indrag, det är något som ger koden en tylig hierarki och gör bland annat if-satser och loopar mer överskådliga och lätta att följa.
            Du kan även tänka på att använda dig av whitespace på rätt ställen samt att kommentera din kod på ett tyldigt och bra sätt. Det finns många exempel på hur man skriver med en god kodstil men det viktigaste är egentligen att ha i 
            åtanke att vem som helst ska kunna gå in och läs din kod och förstå vad den gör.</li>
            <li>Coverage: Det andra C:et handlar om kodtäckning vilket kopplas till hur stor del av källkoden som exekveras i de tester som körs.
            När jag körde min kod i scrutinizer för första gången så hade jag en kod täckning på 24% vilket inte är speciellt högt. Men genom att enkelt addera lite flera tester som exekverade andra delar av källkoden
            kunde jag ganska enkelt få upp den siffrar till 40%. Även om kodtäckningen i sig inte ger en högra kvalitet på koden så får du genom att skriva tester som täcker större delar av koden möjligheten att utvärdera din kod bättre.
            Detta i sin tur kan ju leda till att du isner att viss kod kanske borde skrivas på ett annat sätt eller rentav kan tas bort, vilket slutligen kan leda till en högra kodkvalitet.</li>
            <li>Complexity: Det tredje C:et handlar om kodens komplexitet vilken mätts med hjälp av några olika saker. Först har vi antalet kodrader i källkoden. Sen har vi den cyklomatiska komplexiteten som mäts genom att titta på antalet "vägar" i koden, exempelvis genom att 
            titta på if-satser, for-looper osv där varje statement skapar en egen "väg". För att avgöra koden komplexitet tittar man även på antalet variabler och hur ofta de förekommer samt klasskopplingar som tittar på antalet klasser varje klass är beroende av. Men hjälp av bland annat dessa 4 saker
            kan man alltså avgöra hur komplex koden är vilket i sin tur självklart påverkar koden kvalitet, komplex kod är inte nödvändigtvis lika med bra kod. Tittar man på min kod exempelvis så kunde jag på ett ställe ta bort 10 rader med kod från en if-sats vilket gjorde att min kodkvalitet höjdes från 9.0 till 9.2.</li>
            <li>Cohesion: Det fjärde C:et är Kohesion som är ett mått på till vilken grad en moduls delar är funktionellt relaterade, alltså om de är intriktade på att tillsammans uppfylla ett gemensamt syfte. Det handlar alltså om att en klass som har en hög kohesion är lättare att återanvända och kombinera med andra klasser då 
            den har ett tydligt syfte. För att öka sin kohesion kan det vara bra att fundera på om man ska dela upp visa av sina klasser i flera mindra klasser som har ett tydligare gemensamt syfte.</li>
            <li>Coupling: Det femte C:et är klasskopplingar, eller coupling, som egentligen tittar på antalet klasser varje klass är beroende av. För att ha en god kodkvalitet önskar vi ha så låg coupling som möjligt då vi önskar att våra klasser ska vara så självgående som möjligt.
            Har vi en låg coupling underlättare det även för oss om vi bestämmer oss för att gå in och ändra i våra klasser i efterhand, ger vi detta så behöver vi kanske även gå in och ändra i de klasser som har ett beronde till denna klassen.</li>
            <li>CRAP: Det sjätte och sista C:et handlar i stora drag om att mäta hur stor risk som medkommer om en rad kod skulle förändras. CRAP beräknas med hjälp av den cyklomatiska komplexiteten och kodtäckningen. Det är förhållnadet mellan den cyklomatiska komplexiteten och kodtäckningen som avgör hur högt CRAP score koden har, vi vill självklart ha ett 
            så lågt CRAP score som möjligt.</li>
        </ul>
        <h2>Phpmetrics</h2>
        <p>Skapa en rubrik “Phpmetrics” och analysera dess rapport för din kod. Använd mätvärdena för att hitta flaskhalsar och svaga punkter i din kod (minst 3 stycken). Du vill hitta kod som har förbättringspotential. Visualisera med någon representativ bild från rapporten.</p>
        <h2>Scrutinizer</h2>
        <a href="https://scrutinizer-ci.com/g/julianil/mvc/inspections/9e8fdee9-18cc-4f99-a3ef-196a5393e4bc/log"><img src="https://scrutinizer-ci.com/g/julianil/mvc/badges/build.png?b=main" alt="build score"></a>
        <a href="https://scrutinizer-ci.com/g/julianil/mvc/?branch=main"><img src="https://scrutinizer-ci.com/g/julianil/mvc/badges/coverage.png?b=main" alt="coverage score"></a>
        <a href="https://scrutinizer-ci.com/g/julianil/mvc/?branch=main"><img src="https://scrutinizer-ci.com/g/julianil/mvc/badges/quality-score.png?b=main" alt="quality score"></a>
        <p>Skapa en rubrik “Scrutinizer” och analysera dess rapport för din kod. Gör på samma sätt som du gjorde med Phpmetrics.</p>
        <h2>Förbättringar</h2>
        <ol>
            <li>Det första jag tänker gå in och justera de de issues som scrutinizer lokaliserade, detta då dessa är mindra buggar och liknande som jag med enkla medel kan fixa. Jag tror inte dessa på något 
            sätt är avgörande för kvaliten på min kod elelr hur högt score jag får, men de känns ändå värt att fixa till då det är snabbt och enkelt gjort.</li><br>
            <li>Den andra delen jag tänker fixa i mon kod handlar om att jobba med min kodtäckning, i nuläget har jag endast skrivit tester för mina card-klasser vilket procentuellt blir ett väldigt lågt score.
            Så jag tänker gå in och föröska skriva tester för så många delar som möjligt med målet att höja min kodtäckning, hade jag fått upp den till ett gult värde istället för rött hade jag varit mer än nöjd.</li><br>
            <li>Jag ska även försöka lösa de violations som jag fått i metrics-rapporten, detta då de är kopplade till de classer jag själv skrivit. På grund av detta tänker jag att det kan bli ett bra tillf'lla för mig att 
            skapa en ännu djupare förståelse för koden i min klasser. SKulle jag lyckas lösa alla dessa violations så tänker jag att det rimligen borde höja kvaliten på dom, litegrann iallafall.
            Genom att flytta runt bland mina routes och placera ut dessa i flera olika controller filer, så att varje controller innehåller färra routes. Lyckades jag lösa flera violations. Jag lyckades även lösa en violation genom att 
            få ner complexiteten på min DeckOfCards-klass. Detta gjorde jag främst genom att förenkla en av if-satserna i en klass-funktion.</li>
        </ol>
        Implementera sedan förbättringarna.
        Analysera därefter rapporterna från phpmetrics och Scrutinizer och notera de nya mätvärdena.</p>
        <div class="analys-value">
            <div>
                <h3>Mina initiella mätvärden låg på:</h3>
                <p>Scrutinizer 9.90</p>
                <p>Coverarge 24%</p>
                <p>Average cyclomatic complexity by class 4.5</p>
                <p>Average LCOM0 2.14</p>
            </div>
            <div>
                <h3>Mina slutliga mätvärden låg på:</h3>
                <p>Scrutinizer 9.90</p>
                <p>Coverarge 31%</p>
                <p>Average cyclomatic complexity by class 3.88</p>
                <p>Average LCOM0 1.94</p>
            </div>
            <div>
                <h3>Skillnad:</h3>
                <p>Scrutinizer 0</p>
                <p>Coverarge +7%</p>
                <p>Average cyclomatic complexity by class -0.62</p>
                <p>Average LCOM0 -0.2</p>
            </div>
        </div>
        <h2>Diskussion</h2>
        <p>Avsluta med ett stycke “Diskussion” där du diskuterar kort kring det du nyss gjort.
        Kan man aktivt jobba med kodkvalitet och “clean code” på detta sättet?
        Finns det fördelar och kanske nackdelar?
        Ser du andra möjligheter att jobba mot “clean code”?</p>
    </div>

{% endblock %}
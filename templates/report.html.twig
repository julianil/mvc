{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Redovisning</h1>
    <p class="author">Skriven 2023-04-05 av Julia Nilsson</p>
    <div class="kmom-links">
        <a href="#kmom01">KMOM01</a>
        <a href="#kmom02">KMOM02</a>
        <a href="#kmom03">KMOM03</a>
        <a href="#kmom04">KMOM04</a>
        <a href="#kmom05">KMOM05</a>
        <a href="#kmom06">KMOM06</a>
    </div>
    <a id="kmom01"></a>
    <h3>Kmom01</h3>
    <p>Mina förkunskaper inom objektorientering kommer egentligen endast från kursen objektorienterad python, som jag läste nu i början av året. 
    Så det är inga överdrivna förkunskaper jag kommer med men jag tror ändå att det kommer att lösa sig ganska bra med tiden.<br><br>
    Grunderna inom objektorienterad PHP är väll egentligen att man jobbar med objekt och klasser. Ett objekt skapar man med hjälp av en klass, klassen blir som 
    en mall för objektet som kallas en instans av klassen. Ett objekt består av såkallade medlemsvariabler och av metoder. Det är i medlemsvariablerna som objektets status lagras, 
    alltså ett värde. För att kunna jobba med objektet på olika sätt använder man sig av dess metoder. Dessa representerar de saker som ett objekt kan användas till, 
    alltså de ett objekt kan göra.<br><br>
    Jag uppfattar kodbasen och dess struktur hyfsat enkel och lättnavigerad. Sen kan det alltid känns lite överväldigande att ha så många filer i ett projekt, men det tror jag att jag kommer 
    vänja mig vid ganska snabbt. Behöver mest bli bekväm med att hitta i de olika mapparna och navigera till olika ställen.<br><br>
    Jag tyckte att det var lite extra intressant att läsa om olika typer av utveckling och testning, som exempelvis vad skillnaden på test driven och beteende driven utveckling är och på vilket sätt man 
    bör testa dessa olika typer av utveckling. Så testning i allmänhet ser jag fram emot att lära mig mera om då jag anser att de är en process som till stor del påverkar kvaliten på ens kod.<br><br>
    För detta kmom är min TIL hur man sätter upp ett prjekt med hjälp av symfony. Det tog några försök för mig för att få allting på plats men nu känner jag att jag har hyfsat bra koll på grunderna och 
    de olika komponenterna i kodbasen.</p>
    <br>
    <a id="kmom02"></a>
    <h3>Kmom02</h3>
    <p>Arv är när en klass ärver egenskaper och metoder från en annan klass, det blir som en förälder och ett barn. I barn-klassen kan man komma åt alla metoder och variabler som finns i föräldrar-klassen, men man kan även lägga till och förändra metoder och variabler. 
    Komposition är när en klass existerar i en annan klass. Exempelvis om man har en blom-klass så kan man även ha en blombucket-klass. Blombucket-objektet består av blom-objekt. 
    Interface handlar om att säkerställa att vissa metoder finns i flera klasser. Ett löfte om att en klass ska innehålla ett visst interface(en eller flera metoder), då vet man att man kommer att kunna göra vissa saker eller behandla den klassen på ett visst sätt. 
    Trait är ganska likt arv. PHP har inte stöd för multipelt-arv, alltså att en klass ärver från flera basklasser. Man kan istället i PHP jobba med trait. Detta är något man "kopierar" in i sin klass och som kan användas i flera klasser. Du kan även kopiera in flera traits i en och samma klass. Trait kan vara bra om man har metoder eller liknande som man vill använda i flera klasser, för skulle man behöva förändra metoden behöver man bara göra detta 
    på ett ställe.<br><br>
    Jag tyckte att denna uppgift var väldigt överväldigande. Det var lite för många olika saker att sätta sig in i på en gång enligt mig. Så nu i slutändan är jag inte helt nöjd men jag hoppas 
    på att majoriteten av de som jag gjort fungerar som det är tänkt. Jag försökte att jobba med de uppgfiter och kodexempel som fanns och anpassa dessa för att funka så som jag önskade. Jag tror att jag fick ganska bra ordning på mina klasser till slut och att jag lyckades med arv och kompositioner. Men jag tar gärna emot feedback 
    på hur de hade kunnat göra på ett ännu bättre sätt. När jag fått ordning på klasserna så gjorde jag en enkel styling på korten då jag inte hade tid att sitta med detta allt för länge. Jag la istället tid på att försöka få ordning på sessionen, vilket jag tror gick sådär. Men tillslut fick jag iallafall ihop allting och hoppas på att alla delar fungera som det är tänkt. 
    Sen tänker jag även att jag i nästa kursmoment ska jobba vidare med mina klasser och även stylingen på mina kort.<br><br>
    Såhär långt så tycker jag att arbetet i symfony flyter på bra och utan några större problem. Jag känner igen mig ganska väl i allting från tidigare kurser osv. Sen har jag inte helt kommit in i hur man sätter upp sitt projekt bäst osv, men jag tänker att de kommer med tiden.<br><br>
    För detta kmom är min TIL hur man jobbar med arv mellan klasser i objektorienterad php. Jag känner igen ganska mycket från oopython kursen, men det är självklart ändå mycket som är nytt och annorlunda. Jag ser fram emot att jobba vidare med mina klasser och finslipa de ytterligare i nästa kursmoment.</p>
    <br>
    <a id="kmom03"></a>
    <h3>Kmom03</h3>
    <p>Jag tror att psuedokod och flödesdiagrammet både hjälper och gör det mer komplicerat. Jag upplevde att det var ganska svårt att göra dessa innan jag började skriva min kod. Detta tror jag främst är pågrund av att jag är ovan och inte riktigt har koll på hur man gör.
    Men även att jag är van att skriva min kod genom att prova mig fram, skriva koden och se vad som händer helt enkelt, funkar det inte så justerar jag allting tills jag får det att fungera som jag önskar.
    Med det sagt så tror jag att det är väldigt värdefullt att skapa sin en uppfattning kring vad psuedokod och flödesdiagram är då det säkert är väldigt effektiva verktyg när de används på rätt sätt. Hade jag satt mig in i processerna ännu mer och verkligen försökt så tror jag absolut att dessa verktyg hade kunnat hjälpa mig att skriva ännu bättre kod. Därför ser jag framemot att testa de mera i framtiden och lära mig mer.<br><br>
    Jag valde att bygga vidare på mina redan existerande klasser för att bygga mitt spel, detta då jag upplevde att detta var den bästa och tysligaste lösningen för mig. Hade jag gjort om uppgiften så kanske jag hade valt att bryta ut funktioner i en egen klass bara för att göra det enklare för en utomstående att hitta i koden. I övrigt känner jag mig ganska nöjd med min implementation av spelet och hur det blev i slutändan. Jag har under denna kursen 
    upplevt från början att jag hamnat lite efter tidmässigt och därför kännt mig lite pressad, så med tänke på detta känner jag mig nöjd med kursmomentet även om det alltid finns plats för förbättring. Jag justerade även delar av de jag gjorde under förra kursmomentet vilket jag anser gjorde den implementationen ännu bättre vilket känns roligt. Jag börjar komma in i det mer och mer.<br><br>
    VSåhär långt är min uppfattning av att koda i Symfony både positiv och negativ. Jag har fått till det med hur man startar ett nytt projekt vilket jag nu upplever som en smidigt process. Samtidigt upplever jag att det är ofta jag får felmeddelande som jag inte förstår eller som känns konstiga. Kanske beror det på mig men det känns som att jag inte riktigt har kommit in i hur Symfony vill att jag ska skriva min kod. Detta kan vara lite utmanande och frusterade ibland.<br><br>
    Min TIL för detta kmom är hur man egentligen bör skriva en if-sats. Tack vare de tester som vi gjorde på vår skrivna kod i detta kursmoment upplever jag mig ha fått en djupare förståelse för specifik if-satser och hur dessa bör ställas upp. Testerna gav mig en ordentlig funderare på hur jag faktiskt ibland skriver min kod onödigt krånligt och hur jag kan göra det på ett bättre sätt. Så jag tror aboslut att jag efter detta kmom, framförallt när det kommer till if-satser, kommer fundera 
    ett extra varv på vilken kod som faktiskt behövs skrivas och vilken som inte gör det.</p>
    <br>
    <a id="kmom04"></a>
    <h3>Kmom04</h3>
    <p>Jag tyckte att phpunit var ett smidigt verktyg, html-filen gav verkligen en bra överblick av vad som testas osv vilket gjorde det väldigt mycket enklare. Så överlag tyckte jag att 
    det var ganska smidigt att skriva kod som ska testa min kod. Det som var svårt var främst i början att komma igång med hur man skulle tänka och fundera på vilka typ av tester som man 
    borde göra. Jag upplevde lite svårt emellanåt att komma på tester som kändes som att de verkligen testade koden ordentligt, men jag hoppas att jag fick till det tillslut.<br><br>
    Jag lyckades totalt nå 75% på "classes and Traits" och ca 95% på de andra delarna. På 3 stycken av mina klasser fick jag 100% kodtäckning på alla delar, så jag känner mig nöjd med de resultatet.<br><br>
    Jag upplevde att koden inte var speciellt svår att testa, det gick ganska smidigt. Den största utmaningen var att testa de funktioner som ska generera slumpmässiga resultat på olika sätt, där fick jag klura lite extra.
    Det finns säkert bra sätt att komma runt det, med mockning och liknande, men det var inget jag gav mig på nu.<br><br>
    Jag valde inte att skriva om min kod någonting, jag valde dock att ta bort några 2 funktioner som jag insåg gjorde samma sak som en annan funktion.<br><br>
    Jag anser att testbar-kod och "snygg och ren"-kod absolut hänger ihop till viss del. Jag tror att man genom att göra testbar-kod får en bra förståelse för sin kod och kan säkerställa att alla delar gör de som man tänk osv, 
    vilket ju i sig är att kontrollera hur ren koden är.<br><br>
    Min TIL för detta kmom är hur mycket man kan lära sig om sin kod och sina klassobjekt genom att jobba med testning, det är ett verktyg jag kommer ta med mig framöver.</p>
    <br>
    <a id="kmom05"></a>
    <h3>Kmom05</h3>
    <p></p>
    <br>
    <a id="kmom06"></a>
    <h3>Kmom06</h3>
    <p></p>
{% endblock %}